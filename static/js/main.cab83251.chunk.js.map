{"version":3,"sources":["components/Country/Country.js","logo.svg","components/CountryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Country","stats","CountryCode","toLowerCase","className","src","width","height","alt","Active","Confirmed","Deaths","Recovered","CountryList","map","country","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","countries","a","fetch","resp","json","this","temp","Slug","data","length","prevState","concat","ISO2","filteredCountries","filter","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAuBeA,GCvBA,I,YDEC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEjB,OADAA,EAAMC,YAAcD,EAAMC,YAAYC,cAEpC,yBAAKC,UAAU,WACb,yBACEC,IAAG,oCAA+BJ,EAAMC,YAArC,QACHI,MAAM,KACNC,OAAO,KACPC,IAAKP,EAAMD,UAEb,4BAAKC,EAAMD,SACX,yBAAKI,UAAU,YACb,8CAAgBH,EAAMQ,SACtB,iDAAmBR,EAAMS,YACzB,8CAAgBT,EAAMU,SACtB,iDAAmBV,EAAMW,gBELlBC,G,MATK,SAAC,GAAY,IAAXZ,EAAU,EAAVA,MAClB,OACI,yBAAKG,UAAU,eAEVH,EAAMa,KAAI,SAAAC,GAAO,OAAG,kBAAC,EAAD,CAASC,IAAKD,EAAQb,YAAaD,MAAOc,UCK5DE,G,MAVG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAC5B,OACI,2BAAOC,KAAK,SACZhB,UAAU,SACVc,YAAaA,EACbG,SAAYF,MCFdG,E,kDACJ,aAAe,IAAD,8BACZ,gBA0BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA1BtC,EAAKC,MAAQ,CACXC,UAAW,GACX5B,MAAO,GACPwB,YAAa,IALH,E,4FAQd,6CAAAK,EAAA,sEACqBC,MAAM,wCAD3B,cACQC,EADR,gBAE0BA,EAAKC,OAF/B,OAEQJ,EAFR,OAGEK,KAAKV,SAAS,CAAEK,cACVM,EAAOD,KAAKN,MAAMC,UAJ1B,cAKwBM,GALxB,aAAAL,EAAA,sCAAAA,EAAA,6DAKaf,EALb,iBAMuBgB,MAAM,4CAAD,OACsBhB,EAAQqB,OAP1D,cAMUJ,EANV,gBASuBA,EAAKC,OAT5B,QASUI,EATV,QAUaC,QACP,EAAKd,UAAS,SAACe,GAAD,MAAgB,CAC5BtC,MAAOsC,EAAUtC,MAAMuC,OAAhB,2BACFH,EAAKA,EAAKC,OAAS,IADjB,IAELpC,YAAaa,EAAQ0B,YAd/B,uU,0EAsBA,WACE,MAA+BP,KAAKN,MAA5B3B,EAAR,EAAQA,MAAOwB,EAAf,EAAeA,YACTiB,EAAoBzC,EAAM0C,QAAO,SAAC5B,GAAD,OACrCA,EAAQf,QAAQG,cAAcyC,SAASnB,EAAYtB,kBAErD,OACE,yBAAKC,UAAU,OACb,sDACA,kBAAC,EAAD,CACEc,YAAY,yBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAalB,MAAOyC,S,GA3CVG,IAAMC,WAiDTxB,IC1CKyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cab83251.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./country.css\";\nconst Country = ({ stats }) => {\n  stats.CountryCode = stats.CountryCode.toLowerCase();\n  return (\n    <div className=\"country\">\n      <img\n        src={`https://flagcdn.com/64x48/${stats.CountryCode}.png`}\n        width=\"64\"\n        height=\"48\"\n        alt={stats.Country}\n      ></img>\n      <h2>{stats.Country}</h2>\n      <div className=\"describe\">\n        <p>{`Active : ${stats.Active}`}</p>\n        <p>{`Confirmed : ${stats.Confirmed}`}</p>\n        <p>{`Deaths : ${stats.Deaths}`}</p>\n        <p>{`Recovered : ${stats.Recovered}`}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Country;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport Country from '../Country/Country';\nimport './countrylist.css';\nconst CountryList = ({stats}) =>{\n    return(\n        <div className='countrylist'>\n            {\n             stats.map(country =><Country key={country.CountryCode} stats={country}/>)\n            }\n        </div>\n    )\n}\nexport default CountryList;","import React from 'react';\nimport './searchbox.css'\nconst SearchBox = ({placeholder,handleChange}) =>{\n    return(\n        <input type='search'\n        className='search'\n        placeholder={placeholder}\n        onChange = {handleChange}\n        />\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CountryList from \"./components/CountryList/CountryList\";\nimport SearchBox from \"./components/SearchBox/SearchBox\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      countries: [],\n      stats: [],\n      searchField: \"\",\n    };\n  }\n  async componentDidMount() {\n    const resp = await fetch(\"https://api.covid19api.com/countries\");\n    const countries = await resp.json();\n    this.setState({ countries });\n    const temp = this.state.countries;\n    for (const country of temp) {\n      const resp = await fetch(\n        `https://api.covid19api.com/total/country/${country.Slug}`\n      );\n      const data = await resp.json();\n      if (data.length)\n        this.setState((prevState) => ({\n          stats: prevState.stats.concat({\n            ...data[data.length - 1],\n            CountryCode: country.ISO2,\n          }),\n        }));\n    }\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { stats, searchField } = this.state;\n    const filteredCountries = stats.filter((country) =>\n      country.Country.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>ReactJs: Covid19 Stats</h1>\n        <SearchBox\n          placeholder=\"Enter country name ...\"\n          handleChange={this.handleChange}\n        />\n        <CountryList stats={filteredCountries} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}